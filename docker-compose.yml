version: "3.8"

services:
  # service for authenticate users
  auth-service:
    build:
      context: ./services/auth

    container_name: proxy-auth-service
    restart: unless-stopped

    networks:
      proxy-manager-network:

    ports:
      - "3224:3224"

    environment:
      DATABASE_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable

    depends_on:
      migrator:
        condition: service_completed_successfully

  # service for save request
  request-service:
    build:
      context: ./services/proxy-request

    container_name: proxy-request-service
    restart: unless-stopped

    networks:
      proxy-manager-network:

    ports:
      - "3223:3223"

    environment:
      DATABASE_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable

    depends_on:
      migrator:
        condition: service_completed_successfully

  # service for migrating
  migrator:
    tty: true
    stdin_open: true

    build:
      dockerfile: ./deploy/docker/migrator.Dockerfile
    container_name: go-migrator

    networks:
      proxy-manager-network:

    volumes:
      - ./migrations:/migrations

    command: migrate -path /migrations -database postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable up

    depends_on:
      db:
        condition: service_healthy
        restart: true

  # postgres db
  db:
    image: postgres:alpine
    container_name: proxy-mananger-db
    restart: unless-stopped

    networks:
      proxy-manager-network:

    ports:
      - "5432:5432"

    environment:
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "proxy_manager_db"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  proxy-manager-network:
